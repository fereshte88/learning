package com.rad.ajavaobjectclass.ajavaoopsconcept;

public class OopConcept {
/*
در این صفحه با اصول OOPs آشنا می شویم. برنامه نویسی شی گرا پارادایم است که مفاهیم زیادی از جمله ارث ، اتصال داده ها ، چند شکل و غیره را ارائه می دهد.simula اولین زبان برنامه نویسی شی گرا محسوب می شود.
الگوی برنامه نویسی که همه چیز به عنوان یک شی نمایش داده می شود ، به عنوان یک زبان برنامه نویسی واقعاً شی گرا شناخته می شود.
Smalltalk اولین زبان برنامه نویسی شی گرا به حساب می آید.
زبانهای محبوب شی گرا Java ، C #، PHP، Python، C ++ و غیره هستند.
هدف اصلی برنامه نویسی شی گرا پیاده سازی موجودات دنیای واقعی ، به عنوان مثال ، شی ، کلاس ها ، انتزاع ، وراثت ، چند شکل و غیره است.
Object به معنای موجودیت در دنیای واقعی مانند قلم ، صندلی ، میز ، رایانه ، ساعت و غیره است. برنامه نویسی شی گرا یک روش یا الگوی برای طراحی یک برنامه با استفاده از کلاس ها و اشیاء است. توسعه و نگهداری نرم افزار با ارائه برخی از مفاهیم ساده می کند:
Object
Class
Inheritance
Polymorphism
Abstraction
Encapsulation
جدا از این مفاهیم ، اصطلاحات دیگری نیز وجود دارد که در طراحی شی گرا استفاده می شود:
Coupling
Cohesion
Association
Aggregation
Composition


Object
هر موجودی که حالت و رفتار داشته باشد به عنوان یک شی شناخته می شود. به عنوان مثال صندلی ، قلم ، میز ، صفحه کلید ، دوچرخه و غیره می تواند از نظر فیزیکی یا منطقی باشد.
یک شی می تواند به عنوان نمونه یک کلاس تعریف شود. یک شی حاوی یک آدرس است و برخی از فضای حافظه را اشغال می کند. اشیاء می توانند بدون اطلاع از جزئیات داده ها یا کد های یکدیگر ارتباط برقرار کنند. تنها مورد لازم نوع پیام پذیرفته شده و نوع پاسخی است كه توسط اشیاء باز می گردد.
مثال: سگ یک شیء است زیرا دارای حالاتی مانند رنگ ، نام ، نژاد و غیره است و همچنین رفتارهایی مانند wagging دم ، پارس کردن ، غذا خوردن و غیره.
Class
مجموعه اشیاء کلاس نامیده می شود. این یک موجود منطقی است.
یک کلاس همچنین می تواند به عنوان یک طرح تعریف شود که از آن می توانید یک شیء خاص ایجاد کنید. کلاس هیچ فضایی را مصرف نمی کند.
Inheritance
هنگامی که یک شی همه خصوصیات و رفتارهای یک شیء والدین را به دست می آورد ، به عنوان ارث شناخته می شود. قابلیت استفاده مجدد از کد را فراهم می کند. برای دستیابی به پلی مورفیسم زمان اجرا استفاده می شود.
Polymorphism
اگر یک کار به روش های مختلفی انجام شود ، به عنوان چند ریختی شناخته می شود. به عنوان مثال: متقاعد کردن مشتری متفاوت ، ترسیم چیزی ، به عنوان مثال ، شکل ، مثلث ، مستطیل و غیره.
در جاوا ، از متد overloading وازمتد overriding برای دستیابی به چند ریختی استفاده می کنیم.
مثال دیگر می تواند صحبت کردن در مورد چیزی باشد. به عنوان مثال ، یک گربه با صدای میو صحبت می کند ، سگ پارس می کند و غیره
Abstraction
پنهان کردن جزئیات داخلی و نشان دادن عملکرد به عنوان انتزاع شناخته می شود. به عنوان مثال تماس تلفنی ، ما پردازش داخلی را نمی دانیم.
در جاوا برای دستیابی به انتزاع از abstract class و Interface استفاده می کنیم.
Encapsulation
کد و داده های اتصال (یا بسته بندی) در یک واحد به عنوان محصور سازی شناخته می شوند. به عنوان مثال ، یک کپسول ، با داروهای مختلفی پیچیده می شود.
کلاس جاوا نمونه ای از کپسوله سازی است. Java bean یک کلاس کاملاً محصور شده است زیرا تمام اعضای داده در اینجا خصوصی هستند.
Coupling
کوپلینگ به دانش یا اطلاعات یا وابستگی طبقه دیگر اشاره دارد. وقتی کلاسها از یکدیگر آگاه باشند ، بوجود می آید. اگر یک کلاس اطلاعات مربوط به کلاس دیگری را داشته باشد ، جفت شدن قوی وجود دارد. در جاوا ، ما از اصلاحگرهای private ، protected و public برای نمایش سطح دید یک class ، method و field استفاده می کنیم. می توانید برای اتصال ضعیف تر از Interface استفاده کنید زیرا هیچ پیاده سازی صریح یا واضحی وجود ندارد.
Cohesion
انسجام به سطح یک مؤلفه اشاره دارد که یک تک تک کارهایی را که به خوبی تعریف شده اند ، انجام می دهد. یک کار منفرد و تعریف شده با روشی بسیار منسجم انجام می شود. روش ضعیف منسجم کار را به قسمت های جداگانه تقسیم می کند. بسته java.io بسته ای بسیار منسجم است زیرا دارای کلاس ها و رابط های مربوط به I / O است. با این حال ، بسته بندی جاوا استفاده یک بسته ضعیف منسجم است زیرا دارای کلاس ها و رابط های نامربوط است.
Association
Associationبیانگر رابطه بین اشیاء است. در اینجا ، یک جسم را می توان با یک شی یا بسیاری از اشیاء مرتبط کرد. بین اشیاء چهار نوع ارتباط وجود دارد:
•	One to One
•	One to Many
•	Many to One
•	Many to Many
 بیایید ارتباط با مثالهای واقعی را درک کنیم. به عنوان مثال ، یک کشور می تواند یک نخست وزیر (One to One) داشته باشد و یک نخست وزیر می تواند وزیران زیادی داشته باشد (One to Many). همچنین ، بسیاری از نمایندگان مجلس می توانند یک نخست وزیر داشته باشند (Many to One) ، و بسیاری از وزیران می توانند ادارات زیادی داشته باشند (Many to Many). Associationمی تواند یک طرفه یا دو طرفه باشد.
Aggregation
Aggregation راهی برای دستیابی به Association است. Aggregation نشانگر رابطه ای است که یک شیء به عنوان بخشی از حالت خود دارای اشیاء دیگری است. این نشان دهنده رابطه ضعیف بین اشیاء است. در Java نیز به عنوان رابطه ای Has-a نامیده می شود. مانند ، inheritance بیانگر رابطه ای is-a است. این روش دیگری برای استفاده مجدد از اشیاء است.
Composition
Composition همچنین راهی برای دستیابی به Association است. Composition بیانگر رابطه ای است که در آن یک شیء به عنوان بخشی از حالت خود دارای اشیاء دیگری است. یک رابطه قوی بین جسم حاوی و جسم وابسته وجود دارد. این حالتی است که داشتن اشیاء از وجود مستقلی برخوردار نیست. اگر شیء والدین را حذف کنید ، تمام اشیاء کودک به طور خودکار حذف می شوند.
مزیت OOP بر زبان برنامه نویسی رویکرد گرا
1) OOP توسعه و نگهداری را آسانتر می کند ، در حالی که ، با یک زبان برنامه نویسی روشی محور ، در صورت رشد کد با افزایش اندازه پروژه ، مدیریت آن آسان نیست.
2) OOPs پنهان کردن داده ها را فراهم می کند ، در حالی که ، با یک زبان برنامه نویسی رویکرد گرا ، به داده های جهانی از هرجایی قابل دسترسی است.

Figure: Data Representation in Procedure-Oriented Programming


Figure: Data Representation in Object-Oriented Programming

3) OOPs امکان شبیه سازی رویداد واقعی را بسیار مؤثرتر فراهم می کند. اگر ما از زبان برنامه نویسی شی گرا استفاده می کنیم ، می توانیم مشکلات جهان واقعی را ارائه دهیم.
تفاوت بین یک زبان برنامه نویسی شی گرا و یک زبان برنامه نویسی مبتنی بر شیء چیست؟
زبان برنامه نویسی مبتنی بر شیء به جز وراثت از کلیه ویژگی های OOP پیروی می کند. JavaScript و VBScript نمونه هایی از زبان های برنامه نویسی مبتنی بر شی هستند.

 */
}
