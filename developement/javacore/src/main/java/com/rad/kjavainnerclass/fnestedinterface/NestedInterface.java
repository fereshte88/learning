package com.rad.kjavainnerclass.fnestedinterface;
/*
An interface i.e. declared within another interface or class is known as nested interface.
The nested interfaces are used to group related interfaces so that they can be easy to maintain.
The nested interface must be referred by the outer interface or class. It can't be accessed directly.
واسط یا interfaceاعلام شده در interface یا کلاس دیگر به عنوان nested interface شناخته شده است.
رابط های تو در تو nested interface  برای قرار دادن رابط های مرتبط در گروه استفاده می شوند تا بتوان به آسانی آنها را حفظ کرد.
 رابط تودرتو nested interfaceباید توسط interface یا کلاس بیرونی ارجاع شود. به طور مستقیم قابل دسترسی نیست.
 */
/*
Points to remember for nested interfaces
    Nested interface must be public if it is declared inside the interface but it can have any access modifier if declared within the class.
    Nested interfaces are declared static implicitely.
نکاتی که باید برایnested interface در نظر داشته باشید
     ر Nested Interface اگر در داخل interface اعلام شده باشد باید public باشد اما در صورت اعلام در داخل کلاس می تواند هرگونهmodifier داشته باشد.
     رnested interface به صورت ضمنی استاتیک اعلام می شوند.
 */
/*
Syntax of nested interface which is declared within the interface

    interface interface_name{
     ...
     interface nested_interface_name{
      ...
     }
    }

Syntax of nested interface which is declared within the class

    class class_name{
     ...
     interface nested_interface_name{
      ...
     }
    }
 */
public class NestedInterface implements Showable.Message {
    public String msg() {
        return "Hi, It is Nested Interface In Interface";
    }
}
/*
Internal code generated by the java compiler for nested interface Message
The java compiler internally creates public and static interface as displayed below:.

    public static interface Showable$Message
    {
      public abstract void msg();
    }
 */
/*
Can we define a class inside the interface?

Yes, If we define a class inside the interface, java compiler creates a static nested class. Let's see how can we define a class within the interface:
    interface M{
      class A{}
    }
 */