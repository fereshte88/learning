package com.rad.kjavainnerclass.bmemberinnerclass;
//A non-static class that is created inside a class but outside a method is called member inner class.
public class MemberOuter {
    private int data=30;
    class Inner{
        int msg(){
            return data;
        }
    }
}
/*
Internal working of Java member inner class
The java compiler creates two class files in case of inner class. The class file name of inner class is "Outer$Inner".
If you want to instantiate inner class, you must have to create the instance of outer class. In such case, instance of inner class is created inside the instance of outer class.
کامپایلر جاوا در صورت کلاس داخلی دو فایل کلاس ایجاد می کند. نام فایل  کلاس داخلی "Outer $ Inner" است.
 اگر می خواهیداز کلاس داخلی نمونه ایجاد کنید ، باید نمونه کلاس بیرونی را ایجاد کنید.
 در چنین حالتی ، نمونه کلاس داخلی در نمونه کلاس بیرونی ایجاد می شود.
 */
/*
Internal code generated by the compiler
The java compiler creates a class file named Outer$Inner in this case.
The Member inner class have the reference of Outer class that is why it can access all the data members of Outer class including private.
کد داخلی تولید شده توسط کامپایلر
کامپایلر java در این حالت یک فایل کلاس با نام Outer $ Inner ایجاد می کند.
 کلاس داخلی عضو مرجع کلاس Outer است به همین دلیل می تواند به تمام اعضای داده کلاس Outer از جمله private دسترسی داشته باشد.

 */

//---------------
/*
    import java.io.PrintStream;
    class Outer$Inner
    {
        final Outer this$0;
        Outer$Inner()
        {   super();
            this$0 = Outer.this;
        }
        void msg()
        {
            System.out.println((new StringBuilder()).append("data is ")
                        .append(Outer.access$000(Outer.this)).toString());
        }
    }
 */